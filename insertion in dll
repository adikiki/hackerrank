#include <bits/stdc++.h>

using namespace std;

class DoublyLinkedListNode {
    public:
        int data;
        DoublyLinkedListNode *next;
        DoublyLinkedListNode *prev;

        DoublyLinkedListNode(int node_data) {
            this->data = node_data;
            this->next = nullptr;
            this->prev = nullptr;
        }
};

class DoublyLinkedList {
    public:
        DoublyLinkedListNode *head;
        DoublyLinkedListNode *tail;

        DoublyLinkedList() {
            this->head = nullptr;
            this->tail = nullptr;
        }

        void insert_node(int node_data) {
            DoublyLinkedListNode* node = new DoublyLinkedListNode(node_data);

            if (!this->head) {
                this->head = node;
            } else {
                this->tail->next = node;
                node->prev = this->tail;
            }

            this->tail = node;
        }
};

void print_doubly_linked_list(DoublyLinkedListNode* node, string sep, ofstream& fout) {
    while (node) {
        fout << node->data;

        node = node->next;

        if (node) {
            fout << sep;
        }
    }
}

void free_doubly_linked_list(DoublyLinkedListNode* node) {
    while (node) {
        DoublyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}

// Complete the sortedInsert function below.

/*
 * For your reference:
 *
 * DoublyLinkedListNode {
 *     int data;
 *     DoublyLinkedListNode* next;
 *     DoublyLinkedListNode* prev;
 * };
 *
 */
DoublyLinkedListNode* sortedInsert(DoublyLinkedListNode* head, int data) {

DoublyLinkedListNode* curr=(DoublyLinkedListNode*)malloc(sizeof(DoublyLinkedListNode));
    curr->data=data;
     curr->next=NULL;
     curr->prev=NULL;

     if(head==NULL)
     {
         head=curr;
         return head;
     }


    if(head->data >= curr->data)
    {
        curr->next=head;
        head->prev=curr;
        head=curr;
        return head;
    }
     DoublyLinkedListNode* tem = head;       
        
    //     while(tem->next!=NULL)
    //     {
    //         if(tem->data >= curr->data)
    //         {
    //             tem->prev->next=curr;
    //             curr->prev=tem->prev;
    //             curr->next=tem;
    //             tem->prev=curr;
    //         }
    //       else
    //         {
    //             tem=tem->next;
    //         }
    //     }
        
    //     tem->next=curr;
    //     curr->prev=tem;
    //     //curr->next=NULL;
    
    //  return head;
     while (tem->next != NULL && tem->next->data < curr->data) 
            tem = tem->next; 
  
        
        curr->next = tem->next; 
  
        if (tem->next != NULL) 
            curr->next->prev = curr; 
  
        tem->next = curr; 
        curr->prev = tem;
        return head; 

}

int main()
